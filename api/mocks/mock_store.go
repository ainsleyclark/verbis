// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ainsleyclark/verbis/api/models (interfaces: AuthRepository,CategoryRepository,FieldsRepository,MediaRepository,OptionsRepository,PostsRepository,RoleRepository,SeoMetaRepository,SessionRepository,SiteRepository,UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	http "github.com/ainsleyclark/verbis/api/http"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockAuthRepository is a mock of AuthRepository interface
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *MockAuthRepository) Authenticate(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthRepositoryMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthRepository)(nil).Authenticate), arg0, arg1)
}

// CleanPasswordResets mocks base method
func (m *MockAuthRepository) CleanPasswordResets() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanPasswordResets")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanPasswordResets indicates an expected call of CleanPasswordResets
func (mr *MockAuthRepositoryMockRecorder) CleanPasswordResets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanPasswordResets", reflect.TypeOf((*MockAuthRepository)(nil).CleanPasswordResets))
}

// Logout mocks base method
func (m *MockAuthRepository) Logout(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout
func (mr *MockAuthRepositoryMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthRepository)(nil).Logout), arg0)
}

// ResetPassword mocks base method
func (m *MockAuthRepository) ResetPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockAuthRepositoryMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthRepository)(nil).ResetPassword), arg0, arg1)
}

// SendResetPassword mocks base method
func (m *MockAuthRepository) SendResetPassword(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPassword indicates an expected call of SendResetPassword
func (mr *MockAuthRepositoryMockRecorder) SendResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPassword", reflect.TypeOf((*MockAuthRepository)(nil).SendResetPassword), arg0)
}

// VerifyEmail mocks base method
func (m *MockAuthRepository) VerifyEmail(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail
func (mr *MockAuthRepositoryMockRecorder) VerifyEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockAuthRepository)(nil).VerifyEmail), arg0)
}

// VerifyPasswordToken mocks base method
func (m *MockAuthRepository) VerifyPasswordToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPasswordToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPasswordToken indicates an expected call of VerifyPasswordToken
func (mr *MockAuthRepositoryMockRecorder) VerifyPasswordToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPasswordToken", reflect.TypeOf((*MockAuthRepository)(nil).VerifyPasswordToken), arg0)
}

// MockCategoryRepository is a mock of CategoryRepository interface
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCategoryRepository) Create(arg0 *domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCategoryRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCategoryRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCategoryRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepository)(nil).Delete), arg0)
}

// DeletePostCategories mocks base method
func (m *MockCategoryRepository) DeletePostCategories(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostCategories", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostCategories indicates an expected call of DeletePostCategories
func (mr *MockCategoryRepositoryMockRecorder) DeletePostCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostCategories", reflect.TypeOf((*MockCategoryRepository)(nil).DeletePostCategories), arg0)
}

// Exists mocks base method
func (m *MockCategoryRepository) Exists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockCategoryRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCategoryRepository)(nil).Exists), arg0)
}

// ExistsByName mocks base method
func (m *MockCategoryRepository) ExistsByName(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsByName indicates an expected call of ExistsByName
func (mr *MockCategoryRepositoryMockRecorder) ExistsByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*MockCategoryRepository)(nil).ExistsByName), arg0)
}

// Get mocks base method
func (m *MockCategoryRepository) Get(arg0 http.Params) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCategoryRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryRepository)(nil).Get), arg0)
}

// GetById mocks base method
func (m *MockCategoryRepository) GetById(arg0 int) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockCategoryRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCategoryRepository)(nil).GetById), arg0)
}

// GetByPost mocks base method
func (m *MockCategoryRepository) GetByPost(arg0 int) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPost", arg0)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPost indicates an expected call of GetByPost
func (mr *MockCategoryRepositoryMockRecorder) GetByPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPost", reflect.TypeOf((*MockCategoryRepository)(nil).GetByPost), arg0)
}

// InsertPostCategories mocks base method
func (m *MockCategoryRepository) InsertPostCategories(arg0 int, arg1 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPostCategories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPostCategories indicates an expected call of InsertPostCategories
func (mr *MockCategoryRepositoryMockRecorder) InsertPostCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPostCategories", reflect.TypeOf((*MockCategoryRepository)(nil).InsertPostCategories), arg0, arg1)
}

// Total mocks base method
func (m *MockCategoryRepository) Total() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total
func (mr *MockCategoryRepositoryMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockCategoryRepository)(nil).Total))
}

// Update mocks base method
func (m *MockCategoryRepository) Update(arg0 *domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCategoryRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepository)(nil).Update), arg0)
}

// MockFieldsRepository is a mock of FieldsRepository interface
type MockFieldsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFieldsRepositoryMockRecorder
}

// MockFieldsRepositoryMockRecorder is the mock recorder for MockFieldsRepository
type MockFieldsRepositoryMockRecorder struct {
	mock *MockFieldsRepository
}

// NewMockFieldsRepository creates a new mock instance
func NewMockFieldsRepository(ctrl *gomock.Controller) *MockFieldsRepository {
	mock := &MockFieldsRepository{ctrl: ctrl}
	mock.recorder = &MockFieldsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFieldsRepository) EXPECT() *MockFieldsRepositoryMockRecorder {
	return m.recorder
}

// GetFieldGroups mocks base method
func (m *MockFieldsRepository) GetFieldGroups() (*[]domain.FieldGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldGroups")
	ret0, _ := ret[0].(*[]domain.FieldGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldGroups indicates an expected call of GetFieldGroups
func (mr *MockFieldsRepositoryMockRecorder) GetFieldGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldGroups", reflect.TypeOf((*MockFieldsRepository)(nil).GetFieldGroups))
}

// GetLayout mocks base method
func (m *MockFieldsRepository) GetLayout(arg0 domain.Post, arg1 domain.User, arg2 []domain.Category) (*[]domain.FieldGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayout", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]domain.FieldGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayout indicates an expected call of GetLayout
func (mr *MockFieldsRepositoryMockRecorder) GetLayout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayout", reflect.TypeOf((*MockFieldsRepository)(nil).GetLayout), arg0, arg1, arg2)
}

// MockMediaRepository is a mock of MediaRepository interface
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockMediaRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMediaRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaRepository)(nil).Delete), arg0)
}

// Exists mocks base method
func (m *MockMediaRepository) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockMediaRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMediaRepository)(nil).Exists), arg0)
}

// Get mocks base method
func (m *MockMediaRepository) Get(arg0 http.Params) ([]domain.Media, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.Media)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockMediaRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMediaRepository)(nil).Get), arg0)
}

// GetById mocks base method
func (m *MockMediaRepository) GetById(arg0 int) (domain.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockMediaRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockMediaRepository)(nil).GetById), arg0)
}

// GetByName mocks base method
func (m *MockMediaRepository) GetByName(arg0 string) (domain.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockMediaRepositoryMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMediaRepository)(nil).GetByName), arg0)
}

// GetByUrl mocks base method
func (m *MockMediaRepository) GetByUrl(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrl", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByUrl indicates an expected call of GetByUrl
func (mr *MockMediaRepositoryMockRecorder) GetByUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrl", reflect.TypeOf((*MockMediaRepository)(nil).GetByUrl), arg0)
}

// Serve mocks base method
func (m *MockMediaRepository) Serve(arg0 string, arg1 bool) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Serve indicates an expected call of Serve
func (mr *MockMediaRepositoryMockRecorder) Serve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockMediaRepository)(nil).Serve), arg0, arg1)
}

// Total mocks base method
func (m *MockMediaRepository) Total() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total
func (mr *MockMediaRepositoryMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockMediaRepository)(nil).Total))
}

// Update mocks base method
func (m *MockMediaRepository) Update(arg0 *domain.Media) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMediaRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMediaRepository)(nil).Update), arg0)
}

// Upload mocks base method
func (m *MockMediaRepository) Upload(arg0 *multipart.FileHeader, arg1 int) (domain.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockMediaRepositoryMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMediaRepository)(nil).Upload), arg0, arg1)
}

// Validate mocks base method
func (m *MockMediaRepository) Validate(arg0 *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockMediaRepositoryMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMediaRepository)(nil).Validate), arg0)
}

// MockOptionsRepository is a mock of OptionsRepository interface
type MockOptionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOptionsRepositoryMockRecorder
}

// MockOptionsRepositoryMockRecorder is the mock recorder for MockOptionsRepository
type MockOptionsRepositoryMockRecorder struct {
	mock *MockOptionsRepository
}

// NewMockOptionsRepository creates a new mock instance
func NewMockOptionsRepository(ctrl *gomock.Controller) *MockOptionsRepository {
	mock := &MockOptionsRepository{ctrl: ctrl}
	mock.recorder = &MockOptionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOptionsRepository) EXPECT() *MockOptionsRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockOptionsRepository) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockOptionsRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOptionsRepository)(nil).Exists), arg0)
}

// Get mocks base method
func (m *MockOptionsRepository) Get() (domain.OptionsDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(domain.OptionsDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOptionsRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOptionsRepository)(nil).Get))
}

// GetByName mocks base method
func (m *MockOptionsRepository) GetByName(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockOptionsRepositoryMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockOptionsRepository)(nil).GetByName), arg0)
}

// GetStruct mocks base method
func (m *MockOptionsRepository) GetStruct() (domain.Options, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStruct")
	ret0, _ := ret[0].(domain.Options)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStruct indicates an expected call of GetStruct
func (mr *MockOptionsRepositoryMockRecorder) GetStruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStruct", reflect.TypeOf((*MockOptionsRepository)(nil).GetStruct))
}

// UpdateCreate mocks base method
func (m *MockOptionsRepository) UpdateCreate(arg0 domain.OptionsDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreate indicates an expected call of UpdateCreate
func (mr *MockOptionsRepositoryMockRecorder) UpdateCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreate", reflect.TypeOf((*MockOptionsRepository)(nil).UpdateCreate), arg0)
}

// MockPostsRepository is a mock of PostsRepository interface
type MockPostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepositoryMockRecorder
}

// MockPostsRepositoryMockRecorder is the mock recorder for MockPostsRepository
type MockPostsRepositoryMockRecorder struct {
	mock *MockPostsRepository
}

// NewMockPostsRepository creates a new mock instance
func NewMockPostsRepository(ctrl *gomock.Controller) *MockPostsRepository {
	mock := &MockPostsRepository{ctrl: ctrl}
	mock.recorder = &MockPostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostsRepository) EXPECT() *MockPostsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPostsRepository) Create(arg0 *domain.PostCreate) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPostsRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostsRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockPostsRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPostsRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostsRepository)(nil).Delete), arg0)
}

// Exists mocks base method
func (m *MockPostsRepository) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockPostsRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPostsRepository)(nil).Exists), arg0)
}

// Get mocks base method
func (m *MockPostsRepository) Get(arg0 http.Params, arg1 string) ([]domain.Post, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]domain.Post)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockPostsRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostsRepository)(nil).Get), arg0, arg1)
}

// GetById mocks base method
func (m *MockPostsRepository) GetById(arg0 int) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockPostsRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPostsRepository)(nil).GetById), arg0)
}

// GetBySlug mocks base method
func (m *MockPostsRepository) GetBySlug(arg0 string) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", arg0)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug
func (mr *MockPostsRepositoryMockRecorder) GetBySlug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockPostsRepository)(nil).GetBySlug), arg0)
}

// Total mocks base method
func (m *MockPostsRepository) Total() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total
func (mr *MockPostsRepositoryMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockPostsRepository)(nil).Total))
}

// Update mocks base method
func (m *MockPostsRepository) Update(arg0 *domain.PostCreate) (domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPostsRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostsRepository)(nil).Update), arg0)
}

// MockRoleRepository is a mock of RoleRepository interface
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRoleRepository) Create(arg0 *domain.UserRole) (domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRoleRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockRoleRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRoleRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepository)(nil).Delete), arg0)
}

// Exists mocks base method
func (m *MockRoleRepository) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockRoleRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRoleRepository)(nil).Exists), arg0)
}

// Get mocks base method
func (m *MockRoleRepository) Get() ([]domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRoleRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleRepository)(nil).Get))
}

// GetById mocks base method
func (m *MockRoleRepository) GetById(arg0 int) (domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockRoleRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRoleRepository)(nil).GetById), arg0)
}

// Update mocks base method
func (m *MockRoleRepository) Update(arg0 *domain.UserRole) (domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRoleRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleRepository)(nil).Update), arg0)
}

// MockSeoMetaRepository is a mock of SeoMetaRepository interface
type MockSeoMetaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeoMetaRepositoryMockRecorder
}

// MockSeoMetaRepositoryMockRecorder is the mock recorder for MockSeoMetaRepository
type MockSeoMetaRepositoryMockRecorder struct {
	mock *MockSeoMetaRepository
}

// NewMockSeoMetaRepository creates a new mock instance
func NewMockSeoMetaRepository(ctrl *gomock.Controller) *MockSeoMetaRepository {
	mock := &MockSeoMetaRepository{ctrl: ctrl}
	mock.recorder = &MockSeoMetaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeoMetaRepository) EXPECT() *MockSeoMetaRepositoryMockRecorder {
	return m.recorder
}

// UpdateCreate mocks base method
func (m *MockSeoMetaRepository) UpdateCreate(arg0 *domain.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreate indicates an expected call of UpdateCreate
func (mr *MockSeoMetaRepositoryMockRecorder) UpdateCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreate", reflect.TypeOf((*MockSeoMetaRepository)(nil).UpdateCreate), arg0)
}

// MockSessionRepository is a mock of SessionRepository interface
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Check mocks base method
func (m *MockSessionRepository) Check(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockSessionRepositoryMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionRepository)(nil).Check), arg0)
}

// Create mocks base method
func (m *MockSessionRepository) Create(arg0 int, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSessionRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRepository)(nil).Delete), arg0)
}

// GetByKey mocks base method
func (m *MockSessionRepository) GetByKey(arg0 string) (*domain.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", arg0)
	ret0, _ := ret[0].(*domain.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey
func (mr *MockSessionRepositoryMockRecorder) GetByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockSessionRepository)(nil).GetByKey), arg0)
}

// Has mocks base method
func (m *MockSessionRepository) Has(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockSessionRepositoryMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockSessionRepository)(nil).Has), arg0)
}

// Update mocks base method
func (m *MockSessionRepository) Update(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSessionRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionRepository)(nil).Update), arg0)
}

// MockSiteRepository is a mock of SiteRepository interface
type MockSiteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSiteRepositoryMockRecorder
}

// MockSiteRepositoryMockRecorder is the mock recorder for MockSiteRepository
type MockSiteRepositoryMockRecorder struct {
	mock *MockSiteRepository
}

// NewMockSiteRepository creates a new mock instance
func NewMockSiteRepository(ctrl *gomock.Controller) *MockSiteRepository {
	mock := &MockSiteRepository{ctrl: ctrl}
	mock.recorder = &MockSiteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSiteRepository) EXPECT() *MockSiteRepositoryMockRecorder {
	return m.recorder
}

// GetGlobalConfig mocks base method
func (m *MockSiteRepository) GetGlobalConfig() *domain.Site {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalConfig")
	ret0, _ := ret[0].(*domain.Site)
	return ret0
}

// GetGlobalConfig indicates an expected call of GetGlobalConfig
func (mr *MockSiteRepositoryMockRecorder) GetGlobalConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalConfig", reflect.TypeOf((*MockSiteRepository)(nil).GetGlobalConfig))
}

// GetLayouts mocks base method
func (m *MockSiteRepository) GetLayouts() (*domain.Layouts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayouts")
	ret0, _ := ret[0].(*domain.Layouts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayouts indicates an expected call of GetLayouts
func (mr *MockSiteRepositoryMockRecorder) GetLayouts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayouts", reflect.TypeOf((*MockSiteRepository)(nil).GetLayouts))
}

// GetTemplates mocks base method
func (m *MockSiteRepository) GetTemplates() (*domain.Templates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates")
	ret0, _ := ret[0].(*domain.Templates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates
func (mr *MockSiteRepositoryMockRecorder) GetTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockSiteRepository)(nil).GetTemplates))
}

// GetThemeConfig mocks base method
func (m *MockSiteRepository) GetThemeConfig() (domain.ThemeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThemeConfig")
	ret0, _ := ret[0].(domain.ThemeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThemeConfig indicates an expected call of GetThemeConfig
func (mr *MockSiteRepositoryMockRecorder) GetThemeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThemeConfig", reflect.TypeOf((*MockSiteRepository)(nil).GetThemeConfig))
}

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckToken mocks base method
func (m *MockUserRepository) CheckToken(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken
func (mr *MockUserRepositoryMockRecorder) CheckToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockUserRepository)(nil).CheckToken), arg0)
}

// Create mocks base method
func (m *MockUserRepository) Create(arg0 *domain.UserCreate) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockUserRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), arg0)
}

// Exists mocks base method
func (m *MockUserRepository) Exists(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockUserRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepository)(nil).Exists), arg0)
}

// ExistsByEmail mocks base method
func (m *MockUserRepository) ExistsByEmail(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByEmail", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsByEmail indicates an expected call of ExistsByEmail
func (mr *MockUserRepositoryMockRecorder) ExistsByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByEmail", reflect.TypeOf((*MockUserRepository)(nil).ExistsByEmail), arg0)
}

// Get mocks base method
func (m *MockUserRepository) Get(arg0 http.Params) ([]domain.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockUserRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), arg0)
}

// GetById mocks base method
func (m *MockUserRepository) GetById(arg0 int) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockUserRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), arg0)
}

// GetOwner mocks base method
func (m *MockUserRepository) GetOwner() (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner
func (mr *MockUserRepositoryMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockUserRepository)(nil).GetOwner))
}

// GetRoles mocks base method
func (m *MockUserRepository) GetRoles() ([]domain.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].([]domain.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles
func (mr *MockUserRepositoryMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockUserRepository)(nil).GetRoles))
}

// ResetPassword mocks base method
func (m *MockUserRepository) ResetPassword(arg0 int, arg1 domain.UserPasswordReset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockUserRepositoryMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserRepository)(nil).ResetPassword), arg0, arg1)
}

// Total mocks base method
func (m *MockUserRepository) Total() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Total indicates an expected call of Total
func (mr *MockUserRepositoryMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockUserRepository)(nil).Total))
}

// Update mocks base method
func (m *MockUserRepository) Update(arg0 *domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), arg0)
}
