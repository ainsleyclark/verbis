// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	params "github.com/ainsleyclark/verbis/api/helpers/params"
)

// MediaRepository is an autogenerated mock type for the MediaRepository type
type MediaRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MediaRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: name
func (_m *MediaRepository) Exists(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: meta
func (_m *MediaRepository) Get(meta params.Params) ([]domain.Media, int, error) {
	ret := _m.Called(meta)

	var r0 []domain.Media
	if rf, ok := ret.Get(0).(func(params.Params) []domain.Media); ok {
		r0 = rf(meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Media)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(params.Params) int); ok {
		r1 = rf(meta)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(params.Params) error); ok {
		r2 = rf(meta)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *MediaRepository) GetById(id int) (domain.Media, error) {
	ret := _m.Called(id)

	var r0 domain.Media
	if rf, ok := ret.Get(0).(func(int) domain.Media); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Media)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *MediaRepository) GetByName(name string) (domain.Media, error) {
	ret := _m.Called(name)

	var r0 domain.Media
	if rf, ok := ret.Get(0).(func(string) domain.Media); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(domain.Media)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUrl provides a mock function with given fields: url
func (_m *MediaRepository) GetByUrl(url string) (string, string, error) {
	ret := _m.Called(url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Serve provides a mock function with given fields: uploadPath, acceptWeb
func (_m *MediaRepository) Serve(uploadPath string, acceptWeb bool) ([]byte, string, error) {
	ret := _m.Called(uploadPath, acceptWeb)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, bool) []byte); ok {
		r0 = rf(uploadPath, acceptWeb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, bool) string); ok {
		r1 = rf(uploadPath, acceptWeb)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, bool) error); ok {
		r2 = rf(uploadPath, acceptWeb)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Total provides a mock function with given fields:
func (_m *MediaRepository) Total() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: m
func (_m *MediaRepository) Update(m *domain.Media) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Media) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: file, token
func (_m *MediaRepository) Upload(file *multipart.FileHeader, token string) (domain.Media, error) {
	ret := _m.Called(file, token)

	var r0 domain.Media
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) domain.Media); ok {
		r0 = rf(file, token)
	} else {
		r0 = ret.Get(0).(domain.Media)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(file, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: file
func (_m *MediaRepository) Validate(file *multipart.FileHeader) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
