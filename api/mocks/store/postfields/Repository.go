// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Exists provides a mock function with given fields: field
func (_m *Repository) Exists(field domain.PostField) bool {
	ret := _m.Called(field)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.PostField) bool); ok {
		r0 = rf(field)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Find provides a mock function with given fields: postID
func (_m *Repository) Find(postID int) (domain.PostFields, error) {
	ret := _m.Called(postID)

	var r0 domain.PostFields
	if rf, ok := ret.Get(0).(func(int) domain.PostFields); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PostFields)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPostAndKey provides a mock function with given fields: postID, key
func (_m *Repository) FindByPostAndKey(postID int, key string) (domain.PostFields, error) {
	ret := _m.Called(postID, key)

	var r0 domain.PostFields
	if rf, ok := ret.Get(0).(func(int, string) domain.PostFields); ok {
		r0 = rf(postID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PostFields)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(postID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: postID, fields
func (_m *Repository) Insert(postID int, fields domain.PostFields) error {
	ret := _m.Called(postID, fields)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain.PostFields) error); ok {
		r0 = rf(postID, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
