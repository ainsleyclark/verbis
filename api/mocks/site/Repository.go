// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Global provides a mock function with given fields:
func (_m *Repository) Global() domain.Site {
	ret := _m.Called()

	var r0 domain.Site
	if rf, ok := ret.Get(0).(func() domain.Site); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Site)
	}

	return r0
}

// Layouts provides a mock function with given fields: path
func (_m *Repository) Layouts(path string) (domain.Layouts, error) {
	ret := _m.Called(path)

	var r0 domain.Layouts
	if rf, ok := ret.Get(0).(func(string) domain.Layouts); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Layouts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Screenshot provides a mock function with given fields: path, theme, file
func (_m *Repository) Screenshot(path string, theme string, file string) ([]byte, string, error) {
	ret := _m.Called(path, theme, file)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string) []byte); ok {
		r0 = rf(path, theme, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(path, theme, file)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(path, theme, file)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Templates provides a mock function with given fields: path
func (_m *Repository) Templates(path string) (domain.Templates, error) {
	ret := _m.Called(path)

	var r0 domain.Templates
	if rf, ok := ret.Get(0).(func(string) domain.Templates); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Templates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Themes provides a mock function with given fields: path
func (_m *Repository) Themes(path string) (domain.Themes, error) {
	ret := _m.Called(path)

	var r0 domain.Themes
	if rf, ok := ret.Get(0).(func(string) domain.Themes); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Themes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
