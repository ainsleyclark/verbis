// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	errors "github.com/verbiscms/verbis/api/errors"

	time "time"

	watcher "github.com/verbiscms/verbis/api/watcher"
)

// FileWatcher is an autogenerated mock type for the FileWatcher type
type FileWatcher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *FileWatcher) Close() {
	_m.Called()
}

// Errors provides a mock function with given fields:
func (_m *FileWatcher) Errors() <-chan errors.Error {
	ret := _m.Called()

	var r0 <-chan errors.Error
	if rf, ok := ret.Get(0).(func() <-chan errors.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan errors.Error)
		}
	}

	return r0
}

// Events provides a mock function with given fields:
func (_m *FileWatcher) Events() <-chan watcher.Event {
	ret := _m.Called()

	var r0 <-chan watcher.Event
	if rf, ok := ret.Get(0).(func() <-chan watcher.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan watcher.Event)
		}
	}

	return r0
}

// Watch provides a mock function with given fields: path, poll
func (_m *FileWatcher) Watch(path string, poll time.Duration) error {
	ret := _m.Called(path, poll)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(path, poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
