// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"

	stow "github.com/graymeta/stow"
)

// StowContainer is an autogenerated mock type for the StowContainer type
type StowContainer struct {
	mock.Mock
}

// ID provides a mock function with given fields:
func (_m *StowContainer) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Item provides a mock function with given fields: id
func (_m *StowContainer) Item(id string) (stow.Item, error) {
	ret := _m.Called(id)

	var r0 stow.Item
	if rf, ok := ret.Get(0).(func(string) stow.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stow.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Items provides a mock function with given fields: prefix, cursor, count
func (_m *StowContainer) Items(prefix string, cursor string, count int) ([]stow.Item, string, error) {
	ret := _m.Called(prefix, cursor, count)

	var r0 []stow.Item
	if rf, ok := ret.Get(0).(func(string, string, int) []stow.Item); ok {
		r0 = rf(prefix, cursor, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stow.Item)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, int) string); ok {
		r1 = rf(prefix, cursor, count)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(prefix, cursor, count)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Name provides a mock function with given fields:
func (_m *StowContainer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Put provides a mock function with given fields: name, r, size, metadata
func (_m *StowContainer) Put(name string, r io.Reader, size int64, metadata map[string]interface{}) (stow.Item, error) {
	ret := _m.Called(name, r, size, metadata)

	var r0 stow.Item
	if rf, ok := ret.Get(0).(func(string, io.Reader, int64, map[string]interface{}) stow.Item); ok {
		r0 = rf(name, r, size, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stow.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader, int64, map[string]interface{}) error); ok {
		r1 = rf(name, r, size, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: id
func (_m *StowContainer) RemoveItem(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
