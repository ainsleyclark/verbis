// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	fields "github.com/ainsleyclark/verbis/api/services/fields"

	mock "github.com/stretchr/testify/mock"
)

// FieldService is an autogenerated mock type for the FieldService type
type FieldService struct {
	mock.Mock
}

// GetField provides a mock function with given fields: name, args
func (_m *FieldService) GetField(name string, args ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetFieldObject provides a mock function with given fields: name, args
func (_m *FieldService) GetFieldObject(name string, args ...interface{}) domain.PostField {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 domain.PostField
	if rf, ok := ret.Get(0).(func(string, ...interface{}) domain.PostField); ok {
		r0 = rf(name, args...)
	} else {
		r0 = ret.Get(0).(domain.PostField)
	}

	return r0
}

// GetFields provides a mock function with given fields: args
func (_m *FieldService) GetFields(args ...interface{}) fields.Fields {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 fields.Fields
	if rf, ok := ret.Get(0).(func(...interface{}) fields.Fields); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Fields)
		}
	}

	return r0
}

// GetFlexible provides a mock function with given fields: input, args
func (_m *FieldService) GetFlexible(input interface{}, args ...interface{}) fields.Flexible {
	var _ca []interface{}
	_ca = append(_ca, input)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 fields.Flexible
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) fields.Flexible); ok {
		r0 = rf(input, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Flexible)
		}
	}

	return r0
}

// GetLayout provides a mock function with given fields: name, args
func (_m *FieldService) GetLayout(name string, args ...interface{}) domain.Field {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 domain.Field
	if rf, ok := ret.Get(0).(func(string, ...interface{}) domain.Field); ok {
		r0 = rf(name, args...)
	} else {
		r0 = ret.Get(0).(domain.Field)
	}

	return r0
}

// GetLayouts provides a mock function with given fields: args
func (_m *FieldService) GetLayouts(args ...interface{}) domain.FieldGroups {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 domain.FieldGroups
	if rf, ok := ret.Get(0).(func(...interface{}) domain.FieldGroups); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FieldGroups)
		}
	}

	return r0
}

// GetRepeater provides a mock function with given fields: input, args
func (_m *FieldService) GetRepeater(input interface{}, args ...interface{}) fields.Repeater {
	var _ca []interface{}
	_ca = append(_ca, input)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 fields.Repeater
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) fields.Repeater); ok {
		r0 = rf(input, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Repeater)
		}
	}

	return r0
}
