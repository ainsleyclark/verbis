// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	provider "github.com/mouuff/go-rocket-update/pkg/provider"
)

// Updater is an autogenerated mock type for the Updater type
type Updater struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Updater) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestVersion provides a mock function with given fields:
func (_m *Updater) GetLatestVersion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields:
func (_m *Updater) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retrieve provides a mock function with given fields: srcPath, destPath
func (_m *Updater) Retrieve(srcPath string, destPath string) error {
	ret := _m.Called(srcPath, destPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(srcPath, destPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Walk provides a mock function with given fields: walkFn
func (_m *Updater) Walk(walkFn provider.WalkFunc) error {
	ret := _m.Called(walkFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(provider.WalkFunc) error); ok {
		r0 = rf(walkFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
