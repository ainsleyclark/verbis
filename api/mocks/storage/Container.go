// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	mock "github.com/stretchr/testify/mock"
)

// Container is an autogenerated mock type for the Container type
type Container struct {
	mock.Mock
}

// CreateBucket provides a mock function with given fields: provider, name
func (_m *Container) CreateBucket(provider domain.StorageProvider, name string) error {
	ret := _m.Called(provider, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.StorageProvider, string) error); ok {
		r0 = rf(provider, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBucket provides a mock function with given fields: provider, name
func (_m *Container) DeleteBucket(provider domain.StorageProvider, name string) error {
	ret := _m.Called(provider, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.StorageProvider, string) error); ok {
		r0 = rf(provider, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBuckets provides a mock function with given fields: provider
func (_m *Container) ListBuckets(provider domain.StorageProvider) (domain.Buckets, error) {
	ret := _m.Called(provider)

	var r0 domain.Buckets
	if rf, ok := ret.Get(0).(func(domain.StorageProvider) domain.Buckets); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Buckets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.StorageProvider) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
