// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/ainsleyclark/verbis/api/domain"
	gin "github.com/gin-gonic/gin"

	io "io"

	mock "github.com/stretchr/testify/mock"

	tpl "github.com/ainsleyclark/verbis/api/tpl"
)

// TemplateExecutor is an autogenerated mock type for the TemplateExecutor type
type TemplateExecutor struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *TemplateExecutor) Config() tpl.TemplateConfig {
	ret := _m.Called()

	var r0 tpl.TemplateConfig
	if rf, ok := ret.Get(0).(func() tpl.TemplateConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tpl.TemplateConfig)
		}
	}

	return r0
}

// Execute provides a mock function with given fields: w, name, data
func (_m *TemplateExecutor) Execute(w io.Writer, name string, data interface{}) error {
	ret := _m.Called(w, name, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, string, interface{}) error); ok {
		r0 = rf(w, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutePost provides a mock function with given fields: w, name, ctx, post
func (_m *TemplateExecutor) ExecutePost(w io.Writer, name string, ctx *gin.Context, post *domain.PostData) error {
	ret := _m.Called(w, name, ctx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, string, *gin.Context, *domain.PostData) error); ok {
		r0 = rf(w, name, ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executor provides a mock function with given fields:
func (_m *TemplateExecutor) Executor() tpl.TemplateExecutor {
	ret := _m.Called()

	var r0 tpl.TemplateExecutor
	if rf, ok := ret.Get(0).(func() tpl.TemplateExecutor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tpl.TemplateExecutor)
		}
	}

	return r0
}

// Exists provides a mock function with given fields: template
func (_m *TemplateExecutor) Exists(template string) bool {
	ret := _m.Called(template)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(template)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
