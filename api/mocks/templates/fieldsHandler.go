// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// fieldsHandler is an autogenerated mock type for the fieldsHandler type
type fieldsHandler struct {
	mock.Mock
}

// getField provides a mock function with given fields: field, id
func (_m *fieldsHandler) getField(field string, id ...int) interface{} {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, field)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...int) interface{}); ok {
		r0 = rf(field, id...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// getFields provides a mock function with given fields: id
func (_m *fieldsHandler) getFields(id ...int) map[string]interface{} {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(...int) map[string]interface{}); ok {
		r0 = rf(id...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// getFlexible provides a mock function with given fields: field
func (_m *fieldsHandler) getFlexible(field string) []map[string]interface{} {
	ret := _m.Called(field)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) []map[string]interface{}); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// getRepeater provides a mock function with given fields: field
func (_m *fieldsHandler) getRepeater(field string) []map[string]interface{} {
	ret := _m.Called(field)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) []map[string]interface{}); ok {
		r0 = rf(field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	return r0
}

// getSubField provides a mock function with given fields: field, layout
func (_m *fieldsHandler) getSubField(field string, layout map[string]interface{}) interface{} {
	ret := _m.Called(field, layout)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) interface{}); ok {
		r0 = rf(field, layout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// hasField provides a mock function with given fields: field
func (_m *fieldsHandler) hasField(field string) bool {
	ret := _m.Called(field)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(field)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
